//
// Return to Castle Wolfenstein FGD 
//
// Generated by def2fgd 1.2
// Based on wolf_entites.def
// Cleaned up by SirYodaJedi (wip)
//
// Designed for J.A.C.K.; TrenchBroom version pending.
//

//
// Base Classes
//

@BaseClass = Base_AI
[
	head(string) : "Head" : "default" : "the .skin file to use for his head (must exist in the PC's dir, otherwise 'default' is used)"
	ainame(string) : "AI Name" : : "name of AI"
	spawnflags(flags) = 
	[
		1 : "Triggered Spawn" : 0
		2 : "No Revive" : 0
	]
]
@BaseClass = Base_AI_Zombie
[
	head(string) : "Head" : "default" : "the .skin file to use for his head (must exist in the pc's dir, otherwise 'default' is used)"
	ainame(string) : "AI Name" : : "name of AI"
	spawnflags(flags) = 
	[
		1 : "Triggered Spawn" : 0
		2 : "No Revive" : 0
		4 : "portalzombie" : 0
	]
]

@BaseClass = Base_ItemFlags
[
	spawnflags(flags) = 
	[
		1 : "Suspended" : 0
		2 : "Spinning" : 0
		4 : "Respawn" : 0
	]
]
@BaseClass = Base_ItemFlags_NoSpin
[
	spawnflags(flags) = 
	[
		1 : "Suspended" : 0
		4 : "Respawn" : 0
	]
]
@BaseClass = Base_ItemFlags_NoRespawn
[
	spawnflags(flags) = 
	[
		1 : "Suspended" : 0
		2 : "Spinning" : 0
	]
]

//
// Unsorted
//

@PointClass base(Base_AI) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_soldier : "soldier entity"
[
	skin(string) : "Skin" : "infantryss/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'infantryss/default' is used)"
]

@PointClass base(Base_AI) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_american : "american entity"
[
	skin(string) : "Skin" : "american/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'american/default' is used)"
]

@PointClass base(Base_AI_Zombie) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_zombie : "zombie entity"
[
	skin(string) : "Skin" : "zombie/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'zombie/default' is used)"
]

@PointClass base(Base_AI_Zombie) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_warzombie : "warrior zombie entity"
[
	skin(string) : "Skin" : "warrior/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'warrior/default' is used)"
]

@PointClass base(Base_AI) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_femzombie : "female zombie entity"
[
	// No portalzombie flag?
	skin(string) : "Skin" : "femzombie/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'femzombie/default' is used)"
]

@PointClass base(Base_AI) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_venom : "venom entity"
[
	skin(string) : "Skin" : "venom/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'venom/default' is used)"
]

@PointClass base(Base_AI) size(-32 -32 -24, 32 32 48) color(255 64 0) = ai_loper : "loper entity"
[
	skin(string) : "Skin" : "loper/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'loper/default' is used)"
]

@PointClass base(Base_AI) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_boss_helga : "helga entity"
[
	skin(string) : "Skin" : "helga/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'helga/default' is used)"
]

@PointClass base(Base_AI) size(-32 -32 -24, 32 32 156) color(255 64 0) = ai_boss_heinrich : "heinrich entity"
[
	// verify skin default - copypasta error?
	skin(string) : "Skin" : "helga/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'helga/default' is used)"
]

@PointClass base(Base_AI) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_partisan
[
	skin(string) : "Skin" : "partisan/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'partisan/default' is used)"
]

@PointClass base(Base_AI) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_civilian
[
	skin(string) : "Skin" : "civilian/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'civilian/default' is used)"
]

@PointClass base(Base_AI) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_eliteguard : "elite guard entity"
[
	skin(string) : "Skin" : "eliteguard/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'eliteguard/default' is used)"
]

@PointClass base(Base_AI) size(-32 -32 -24, 32 32 64) color(255 64 0) = ai_supersoldier : "supersoldier entity"
[
	skin(string) : "Skin" : "supersoldier/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'supersoldier/default' is used)"
]

@PointClass base(Base_AI) size(-32 -32 -24, 32 32 64) color(255 64 0) = ai_protosoldier : "protosoldier entity"
[
	skin(string) : "Skin" : "protosoldier/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'protosoldier/default' is used)"
]

@PointClass base(Base_AI) size(-16 -16 -24, 16 16 64) color(255 64 0) = ai_blackguard : "black guard entity"
[
	skin(string) : "Skin" : "blackguard/default" : "the .skin file to use for this character (must exist in the player characters directory, otherwise 'blackguard/default' is used)"
]

///
///
///

@PointClass size(-18 -18 -24, 18 18 48) color(255 128 0) = ai_marker : "AI marker"
[
	spawnflags(flags) = 
	[
		1 : "NODROP" : 0
	]
]

@SolidClass = ai_trigger : "Triggered only by the player touching it"
[
	wait(integer) : "Wait" : "-1" : "Seconds between triggerings, -1 = one time only (default)."
	ainame(string) : "AI Name" : : "name of AI to target (use player for the.. player)"
	target(target_destination) : "Target" : : "trigger identifier for that AI script"
	spawnflags(flags) = 
	[
		1 : "Start off" : 0
	]
]

///
///
///

@PointClass size(-8 -8 -8, 8 8 8) offset(0 0 8) color(255 255 0) studio("models/powerups/clipboard/clipboard.md3") = item_clipboard : "We currently use:\n\nclip_interrogation\n\nclip_codeddispatch\n\nclip_alertstatus"
[
	model(studio) : "Model" : "models/powerups/clipboard/clipboard.md3" : "World model (the clipboard laying flat is 'clipboard2.md3')"
	popup(string) : "Popup" : "" : "Menu to popup. No default since you won't want the same clipboard laying around. (clipboard will display a 'put popup here' message)"
	notebookpage(string) : "Notebook page" : : "When clipboard is picked up, this page (menu) will be added to your notebook (FIXME: TODO: more info goes here)"
	
	// don't inherit Base_ItemFlags, because 4 is called Persistent instead of Respawn
	spawnflags(flags) = 
	[
		1 : "Suspended" : 0
		2 : "Spinning" : 0
		4 : "Persistant" : 0
	]
]

@PointClass base(Base_ItemFlags_NoRespawn) size(-8 -8 -8, 8 8 8) offset(0 0 8) color(255 255 0) studio("models/powerups/treasure/goldbar.md3") = item_treasure : "Items the player picks up that are just used to tally a score at end-level"
[
	model(studio) : "Model" : "models/powerups/treasure/goldbar.md3" : ""
	noise(string) : "Sound" : "sound/pickup/treasure/gold.wav" : "Sound to play on pickup."
	message(string) : "In-game item name" : : "What to call the item when it's picked up.  defaults to Treasure Item (SA: temp)"
]

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/health/health_s.md3") = item_health_small []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/health/health_m.md3") = item_health []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/health/health_l.md3") = item_health_large []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/health/health_t1.md3") = item_health_turkey : "Multi-stage health item.\n\ngives amount on first use based on skill:\n\nskill 1: 50\n\nskill 2: 50\n\nskill 3: 50\n\nskill 4: 40\n\nskill 5: 30\n\nthen gives 15 on finishing up\n\nplayer will only eat what he needs.  health at 90, turkey fills up and leaves remains (leaving 15).  health at 5 you eat the whole thing." []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/health/health_b1.md3") = item_health_breadandmeat : "multi-stage health item.\n\namount on first use is based on skill:\n\nthen gives 10 on finishing up" []

@PointClass base(Base_ItemFlags_NoSpin) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/health/health_wallbox.md3") = item_health_wall_box : "single use health with dual state model.\n\nplease set the suspended flag to keep it from falling on the ground\n\ndefaults to 50 pts health" []

@PointClass base(Base_ItemFlags_NoSpin) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/health/health_w.md3") = item_health_wall : "defaults to 50 pts health\n\nyou will probably want to check the 'suspended' box to keep it from falling to the ground" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/instant/stamina_stein.md3") = item_stamina_stein : "defaults to 30 sec stamina boost" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/instant/stamina_brandy1.md3") = item_stamina_brandy : "defaults to 30 sec stamina boost" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/armor/armor_body1.md3") = item_armor_body []

@PointClass base(Base_ItemFlags_NoSpin) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/armor/armor_body2.md3") = item_armor_body_hang []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/armor/armor_head1.md3") = item_armor_head []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/knife/knife.md3") = weapon_knife []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/luger/luger.md3") = weapon_luger []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/mauser/mauser.md3") = weapon_mauserRifle []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/thompson/thompson.md3") = weapon_thompson []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/sten/sten.md3") = weapon_sten []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/colt/colt.md3") = weapon_colt []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models\weapons2\mp40\mp40.md3") = weapon_mp40 
[
	stand(choices) : Stand : : "Default (no value): laying in a default position on it's side\nRack Mount (2): upright, barrel pointing up, slightly angled"
	[
		// TODO: test if this works
		"" : "Default"
		"2" : "Rack Mount"
	]
]

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/fg42/fg42.md3") = weapon_fg42 []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/sp5/sp5.md3") = weapon_silencer []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/panzerfaust/pf.md3") = weapon_panzerfaust []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/venom/pu_venom.md3") = weapon_venom []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/flamethrower/pu_flamethrower.md3") = weapon_flamethrower []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/tesla/pu_tesla.md3") = weapon_tesla []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/mauser/pu_mauser_scope.md3") = weapon_sniperScope []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/weapons2/garand/garand.md3") = weapon_snooperrifle []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am9mm_s.md3") = ammo_9mm_small : "used by: Luger pistol, MP40 machinegun" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am9mm_m.md3") = ammo_9mm : "used by: Luger pistol, MP40 machinegun" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am9mm_l.md3") = ammo_9mm_large : "used by: Luger pistol, MP40 machinegun" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am45cal_s.md3") = ammo_45cal_small : "used by: Thompson, Colt" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am45cal_m.md3") = ammo_45cal : "used by: Thompson, Colt" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am45cal_l.md3") = ammo_45cal_large : "used by: Thompson, Colt" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am792mm_s.md3") = ammo_792mm_small : "used by: Mauser rifle, FG42" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am792mm_m.md3") = ammo_792mm : "used by: Mauser rifle, FG42" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am792mm_l.md3") = ammo_792mm_large : "used by: Mauser rifle, FG42" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am30cal_s.md3") = ammo_30cal_small : "used by: Garand rifle" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am30cal_m.md3") = ammo_30cal : "used by: Garand rifle" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am30cal_l.md3") = ammo_30cal_large : "used by: Garand rifle" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/am127mm.md3") = ammo_127mm : "used by: Venom gun" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/amgren_bag.md3") = ammo_grenades []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/amgrenus_bag.md3") = ammo_grenades_american []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/dynamite.md3") = ammo_dynamite : "" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/amcell.md3") = ammo_cell : "used by: Tesla\n\nBoosts recharge on Tesla " []

@PointClass base(Base_ItemFlags) base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/amfuel.md3") = ammo_fuel : "used by: Flamethrower" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) offset(0 0 16) color(77 77 255) studio("models/powerups/ammo/ampf.md3") = ammo_panzerfaust : "used by: German Panzerfaust" []

@PointClass base(Base_ItemFlags) size(-16 -16 -16, 16 16 16) color(77 77 255) studio("models/powerups/holdable/medkit.md3") = holdable_medkit : "pickup sound : sound/pickup/holdable/get_medkit.wav\n\nuse sound : sound/pickup/holdable/get_medkit.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/wine.md3") = holdable_wine : "pickup sound : sound/pickup/holdable/get_wine.wav\n\nuse sound : sound/pickup/holdable/use_wine.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/stamina.md3") = holdable_stamina : "Protection from fatigue\n\nUsing the sprint key will not fatigue the character\n\npickup sound : sound/pickup/holdable/get_stamina.wav\n\nuse sound : sound/pickup/holdable/use_stamina.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/venom_book.md3") = holdable_book1 []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/paranormal_book.md3") = holdable_book2 []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/zemphr_book.md3") = holdable_book3 []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/11.md3") = holdable_11 []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/12.md3") = holdable_12 []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/13.md3") = holdable_13 []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/14.md3") = holdable_14 []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(77 77 255) studio("models/powerups/holdable/15.md3") = holdable_15 : "" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/skull.md3") = key_skull1 : "key 1\n\npickup sound : sound/pickup/keys/skull.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/chalice.md3") = key_chalice2 : "key 2\n\npickup sound : sound/pickup/keys/chalice.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/eye.md3") = key_eye3 : "key 3\n\npickup sound : sound/pickup/keys/eye.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/radio_port.md3") = key_radio4 : "key 4\n\npickup sound : sound/pickup/keys/radio.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/satchel_charge.md3") = key_satchelcharge5 : "key 5\n\npickup sound : sound/pickup/keys/satchelcharge.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/binoculars.md3") = key_binocs : "Binoculars.\n\npickup sound : sound/pickup/keys/binocs.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key7.md3") = key_7 : "key 7\n\npickup sound : sound/pickup/keys/key7.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key.md3") = key_key8 : "key 8\n\npickup sound : sound/pickup/keys/key8.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key.md3") = key_key9 : "key 9\n\npickup sound : sound/pickup/keys/key9.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key.md3") = key_key10 : "key 10\n\npickup sound : sound/pickup/keys/key10.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key.md3") = key_key11 : "key 11\n\npickup sound : sound/pickup/keys/key11.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key.md3") = key_key12 : "key 12\n\npickup sound : sound/pickup/keys/key12.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key.md3") = key_key13 : "key 13\n\npickup sound : sound/pickup/keys/key13.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key.md3") = key_key14 : "key 14\n\npickup sound : sound/pickup/keys/key14.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key.md3") = key_key15 : "key 15\n\npickup sound : sound/pickup/keys/key15.wav" []

@PointClass base(Base_ItemFlags) size(-8 -8 -8, 8 8 8) color(255 255 0) studio("models/powerups/keys/key.md3") = key_key16 : "key 16\n\npickup sound : sound/pickup/keys/key16.wav" []

///
///
///

@PointClass size(-8 -8 -8, 8 8 8) color(255 0 255) studio(models/mapobjects/electronics/alarmbox.md3) = alarm_box : "You need to have an origin brush as part of this entity\n\ncurrent alarm box model is (8 x 16 x 28)\n\nteamed alarm_boxes work in tandem (switches/lights syncronize)\n\ntarget a box to DLights to have them activate/deactivate with the system (use a stylestring that matches the cycletime for the alarmbox sound)\n\nalarm sound locations are also placed in the DLights, so wherever you place an attached dlight, you will hear the alarm\n\nplace the origin at the center of your trigger box"
[
	health(string) : "Health" : 10 : 
	noise(string) : "Sound" : : "the sound to play over the system (this would be the siren sound)"
	team(string) : "Team" : : "key/value is valid for teamed alarm boxes"
	spawnflags(flags) = 
	[
		1 : "Start On" : 0 : "means the button is pushed in, any DLights are cycling, and alarms are sounding"
	]
]

// 
// ---- You Are Here
// 

///
///
///

@PointClass size(-18 -18 -24, 18 18 48) offset(0 0 24) color(255 0 255) = info_player_deathmatch : "potential spawning position for deathmatch games.\n\nThe first time a player enters the game, they will be at an 'initial' spot.\n\nTargets will be fired when someone spawns in on them.\n\nIf the start position is targeting an entity, the players camera will start out facing that ent (like an info_notnull)"
[
	nobots(choices) : "No Bots" : : "will prevent bots from using this spot."
	[
		"0" : "Bots Can Use"
		"1" : "Prevent Bot usage"
	]
	nohumans(choices) : "No Humans" : : "will prevent non-bots from using this spot."
	[
		"0" : "Humans Can Use"
		"1" : "Prevent Human Usage"
	]
	spawnflags(flags) = 
	[
		1 : "Initial" : 0
	]
]

@PointClass size(-18 -18 -24, 18 18 48) color(255 0 0) = info_player_checkpoint : "these are start points /after/ the level start\n\nthe letter (a b c d) designates the checkpoint that needs to be complete in order to use this start position"
[
	spawnflags(flags) = 
	[
		1 : "a" : 0
		2 : "b" : 0
		4 : "c" : 0
		8 : "d" : 0
	]
]

@PointClass size(-18 -18 -24, 18 18 48) offset(0 0 24) color(255 0 0) = info_player_start : "equivelant to info_player_deathmatch"
[
]

@PointClass size(-16 -16 -24, 16 16 32) color(255 0 255) = info_player_intermission : "The intermission will be viewed from this point.  Target an info_notnull for the view direction."
[
	spawnflags(flags) = 
	[
		1 : "Axis" : 0
		2 : "Allied" : 0
	]
]

///
///
///

@SolidClass = func_group : "Used to group brushes together just for editor convenience.  They are turned into normal brushes by the utilities."
[
]

@PointClass size(-4 -4 -4, 4 4 4) color(0 128 0) = info_camp : "Used as a positional target for calculations in the utilities (spotlights, etc), but removed during gameplay."
[
]

@PointClass size(-4 -4 -4, 4 4 4) color(0 128 0) = info_null : "Used as a positional target for calculations in the utilities (spotlights, etc), but removed during gameplay."
[
]

@PointClass size(-4 -4 -4, 4 4 4) color(0 128 0) = info_notnull : "Used as a positional target for in-game calculation, like jumppad targets.\n\ntarget_position does the same thing"
[
]

@PointClass size(-16 -16 -24, 16 16 32) color(255 0 0) = info_notnull_big : "info_notnull with a bigger box for ease of positioning"
[
]

@PointClass size(-8 -8 -8, 8 8 8) iconsprite("sprites/light.spr") flags(Light) = light : "Non-displayed light.\n\nNonlinear checkbox gives inverse square falloff instead of linear \n\nAngle adds light:surface angle calculations (only valid for Linear lights) (wolf)\n\nLights pointed at a target will be spotlights."
[
	light(string) : Light : : "overrides the default 300 intensity."
	radius(string) : Radius : : "overrides the default 64 unit radius of a spotlight at the target point."
	fade(string) : Fade : : "falloff/radius adjustment value. multiply the run of the slope by fade (1.0f default) (only valid for Linear lights) (wolf)"
	q3map_non-dynamic(string) : Q3map_non-dynamic : : "specifies that this light should not contribute to the world's 'light grid' and therefore will not light dynamic models in the game.(wolf)"
	_color(color1) : "RGB color" : "1 1 0.5" : "weighted RGB value of light color"
	spawnflags(flags) = 
	[
		1 : "nonlinear" : 0
		2 : "angle" : 0
		4 : "negative_spot" : 0
		8 : "negative_point" : 0
		16 : "q3map_non" : 0
		64 : "dynamic" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) iconsprite("sprites/light.spr") flags(Light) = lightJunior : "Non-displayed light that only affects dynamic game models, but does not contribute to lightmaps\n\nNonlinear checkbox gives inverse square falloff instead of linear \n\nAngle adds light:surface angle calculations (only valid for Linear lights) (wolf)\n\nLights pointed at a target will be spotlights."
[
	light(string) : Light : : "overrides the default 300 intensity."
	radius(string) : Radius : : "overrides the default 64 unit radius of a spotlight at the target point."
	fade(string) : Fade : : "falloff/radius adjustment value. multiply the run of the slope by fade (1.0f default) (only valid for Linear lights) (wolf)"
	_color(color1) : "RGB color" : "1 1 0.5" : "weighted RGB value of light color"
	spawnflags(flags) = 
	[
		1 : "nonlinear" : 0
		2 : "angle" : 0
		4 : "negative_spot" : 0
		8 : "negative_point" : 0
	]
]

@PointClass size(-32 -32 -24, 32 32 -16) color(255 0 0) = misc_teleporter_dest : "Point teleporters at these.\n\nNow that we don't have teleport destination pads, this is just\n\nan info_notnull"
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 0 0) = misc_grabber_trap : "If you do not set a wait value, then it will default to the duration of the animations.  (so since the first attack animation is 11 frames long and plays at 15 fps, the default wait after using attack 1 would be 11/15, or 0.73 seconds)\n\ngrabber media:\n\nmodel - models/misc/grabber/grabber.md3\n\nwake sound - models/misc/grabber/grabber_wake.wav\n\nattack sound - models/misc/grabber/grabber_attack.wav\n\npain sound - models/misc/grabber/grabber_pain.wav\n\nThe current frames are:\n\nfirst frame\n    |   looping frames\n        |   fps\n            |   damage at frame\n                |"
[
	fields(string) : Fields : : ""
	adist(string) : Adist : : "- radius of 'wakeup' box.  player passing closer than distance activates grabber (def: 64)"
	bdist(string) : Bdist : : "- radius of 'attack' box.  player passing into this gets a swipe.  (def: 32)"
	health(string) : "Health" : : "- how much damage grabber can take after 'wakeup' (def: 100)"
	range(string) : Range : : "- when attacking, how far from the origin the grabber can strike (def: 64)"
	dmg(string) : Dmg : : "- max damage to give on a successful strike (def: 10)"
	wait(string) : Wait : : "- how long to wait between strikes if the player stays within the 'attack' box (def: see below)"
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) = misc_spotlight
[
	target(target_destination) : Target : : "- .camera (spline) file for light to track.  do not specify file extension."
	spawnflags(flags) = 
	[
		1 : "start_on" : 0
		2 : "back_and_forth" : 0 : "- when end of target spline is hit, reverse direction rather than looping (looping is default)"
	]
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) studio() = misc_model
[
	model(studio) : "Model" : : "arbitrary .md3 file to display"
	modelscale(string) : Modelscale : : "scale multiplier (defaults to 1x)"
	modelscale_vec(string) : Modelscale_vec : : "scale multiplier (defaults to 1 1 1, scales each axis as requested)"
	modelscale_vec(string) : Modelscale_vec : : "- Set scale per-axis.  Overrides modelscale, so if you have both, the modelscale is ignored"
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) studio() = misc_gamemodel : "md3 placed in the game at runtime (rather than in the bsp)"
[
	model(studio) : "Model" : : "arbitrary .md3 file to display"
	modelscale(string) : Modelscale : : "scale multiplier (defaults to 1x, and scales uniformly)"
	modelscale_vec(string) : Modelscale_vec : : "scale multiplier (defaults to 1 1 1, scales each axis as requested)"
	trunk(string) : Trunk : : "diameter of solid core (used for trace visibility and collision (not ai pathing))"
	trunkheight(string) : Trunkheight : : "height of trunk"
	modelscale_vec(string) : Modelscale_vec : : "- Set scale per-axis.  Overrides modelscale, so if you have both, the modelscale is ignored"
	spawnflags(flags) = 
	[
		1 : "orient_lod" : 0 : "- if flagged, the entity will yaw towards the player when the LOD switches"
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 128 0) = misc_vis_dummy : "If this entity is visible (in player's PVS) then it's target is forced to be active whether it is in the player's PVS or not.\n\nThis entity itself is never visible or transmitted to clients.\n\nFor safety, you should have each dummy only point at one entity (however, it's okay to have many dummies pointing at one entity)"
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 128 0) = misc_vis_dummy_multiple : "If this entity is visible (in player's PVS) then it's target is forced to be active whether it is in the player's PVS or not.\n\nThis entity itself is never visible or transmitted to clients.\n\nThis entity was created to have multiple speakers targeting it"
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 128 0) = misc_light_surface : "The surfaces nearest these entities will be the only surfaces lit by the targeting light\n\nThis must be within 64 world units of the surface to be lit!"
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(0 0 255) = misc_portal_surface : "The portal surface nearest this entity will show a view from the targeted misc_portal_camera, or a mirror view if untargeted.\n\nThis must be within 64 world units of the surface!"
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(0 0 255) = misc_portal_camera : "The target for a misc_portal_director.  You can set either angles or target another entity to determine the direction of view."
[
	roll(string) : Roll : : "an angle modifier to orient the camera around the target vector;"
	spawnflags(flags) = 
	[
		1 : "slowrotate" : 0
		2 : "fastrotate" : 0
	]
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) = shooter_mortar : "Lobs a mortar so that it will pass through the info_notnull targeted by this entity\n\nif LAUNCH_FX is checked a smoke effect will play at the origin of this entity.\n\nif FLASH_FX is checked a muzzle flash effect will play at the origin of this entity."
[
	random(string) : Random : : "the number of degrees of deviance from the target. (1.0 default)"
	spawnflags(flags) = 
	[
		1 : "smoke_fx" : 0
		2 : "flash_fx" : 0
	]
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) = shooter_rocket : "Fires at either the target or the current direction."
[
	random(string) : Random : : "the number of degrees of deviance from the target. (1.0 default)"
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) = shooter_zombiespit : "Fires at either the target or the current direction."
[
	random(string) : Random : : "the number of degrees of deviance from the target. (1.0 default)"
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) = shooter_tesla
[
	sticktime(string) : Sticktime : : "- how long each bolt should 'stick' to an impact point (def: .5)"
	random(string) : Random : : "- how far away to drift from the target. (def: 0.0)"
	width(string) : Width : : "- width of the bolts (def: 20)"
	count(string) : Count : : "- number of bolts to fire per impact point.  (def: 2)"
	DLightsize(string) : DLightsize : : "- how big to make the attached light.  (def: 500)"
	spawnflags(flags) = 
	[
		1 : "start_on" : 0 : "means it starts out active, the default is to start off and fire when triggered"
		2 : "dlight" : 0 : "will have a built-in dlight flashing too (use color picker to set color of dlight. (def: blue) )"
	]
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) = shooter_grenade : "Fires at either the target or the current direction."
[
	random(string) : Random : : "is the number of degrees of deviance from the target. (1.0 default)"
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) = shooter_sniper : "Fires at either the target or the current direction."
[
	random(string) : Random : : "is the number of degrees of deviance from the target. (1.0 default)"
	damage(string) : Damage : : "the amount of damage sniper will cause when he hits his target default is 10"
	radius(string) : Radius : : "is the dist the target would need to travel before sniper lost his beat default 256"
	delay(string) : Delay : : "is the rate of fire defaults to 1 sec"
]

@SolidClass = sniper_brush : "this should be a volume that will encompase the area where the sniper target assigned to the\n\nbrush would fire at the player"
[
]

@PointClass size(-4 -4 -4, 4 4 4) color(0 255 0) = corona : "Use color picker to set color or key color.  values are 0.0-1.0 for each color (rgb)."
[
	scale(string) : Scale : : "will designate a multiplier to the default size.  (so 2.0 is 2xdefault size, 0.5 is half)"
	spawnflags(flags) = 
	[
		1 : "start_off" : 0
	]
]

@PointClass size(-12 -12 -12, 12 12 12) color(0 255 0) = dlight : "Stylestring characters run at 10 cps in the game. (meaning the alphabet, at 24 characters, would take 2.4 seconds to cycle)\n\nUse color picker to set color or key color.  values are 0.0-1.0 for each color (rgb)."
[
	style(string) : Style : : "value is an int from 1-19 that contains a pre-defined 'flicker' string."
	stylestring(string) : Stylestring : : "set your own 'flicker' string.  (ex. klmnmlk). NOTE: this should be all lowercase"
	offset(string) : Offset : : "change the initial index in a style string.  So val of 3 in the above example would start this light at 'N'.  (used to get DLights using the same style out of sync)."
	atten(string) : Atten : : "offset from the alpha values of the stylestring.  stylestring of ddeeffzz with an atten of -1 would result in ccddeeyy"
	shader(string) : Shader : : "name of shader to apply"
	sound(string) : Sound : : "sound to loop every cycle (this actually just plays the sound at the beginning of each cycle)"
	styles(string) : Styles : : ""
	spawnflags(flags) = 
	[
		1 : "forceactive" : 0 : "- toggle makes sure this light stays alive in a map even if the user has r_dynamiclight set to 0."
		2 : "startoff" : 0 : "- means the dlight doesn't spawn in until ent is triggered"
		4 : "onetime" : 0 : "- when the dlight is triggered, it will play through it's cycle once, then shut down until triggered again"
	]
]

@PointClass size(-256 -256 -16, 256 256 16) color(255 0 0) = misc_snow256 : "health = density defaults to 32"
[
	spawnflags(flags) = 
	[
		1 : "turbulent" : 0
	]
]

@PointClass size(-128 -128 -16, 128 128 16) color(255 0 0) = misc_snow128 : "health = density defaults to 32"
[
	spawnflags(flags) = 
	[
		1 : "turbulent" : 0
	]
]

@PointClass size(-64 -64 -16, 64 64 16) color(255 0 0) = misc_snow64 : "health = density defaults to 32"
[
	spawnflags(flags) = 
	[
		1 : "turbulent" : 0
	]
]

@PointClass size(-32 -32 -16, 32 32 16) color(255 0 0) = misc_snow32 : "health = density defaults to 32"
[
	spawnflags(flags) = 
	[
		1 : "turbulent" : 0
	]
]

@PointClass size(-8 -8 0, 8 8 16) color(255 0 0) = misc_bubbles8 : "health = density defaults to 32"
[
	spawnflags(flags) = 
	[
		1 : "turbulent" : 0
	]
]

@PointClass size(-16 -16 0, 16 16 16) color(255 0 0) = misc_bubbles16 : "health = density defaults to 32"
[
	spawnflags(flags) = 
	[
		1 : "turbulent" : 0
	]
]

@PointClass size(-32 -32 0, 32 32 16) color(255 0 0) = misc_bubbles32 : "health = density defaults to 32"
[
	spawnflags(flags) = 
	[
		1 : "turbulent" : 0
	]
]

@PointClass size(-64 -64 0, 64 64 64) color(255 0 0) = misc_bubbles64 : "health = density defaults to 32"
[
	spawnflags(flags) = 
	[
		1 : "turbulent" : 0
	]
]

@PointClass size(-16 -16 -24, 16 16 24) color(255 0 0) = misc_mg42 : "harc = horizonal fire arc Default is 115\n\nvarc = vertical fire arc Default is 45\n\nhealth = how much damage can it take default is 50\n\ndamage = determines how much the weapon will inflict if a non player uses it"
[
	accuracy(string) : Accuracy : : "all guns are 100% accurate an entry of 0.5 would make it 50% "
	spawnflags(flags) = 
	[
		1 : "high" : 0
		2 : "notripod" : 0
	]
]

@PointClass size(-32 -32 0, 32 32 100) color(255 0 0) = misc_flak
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(77 179 204) = misc_spawner : "use the pickup name\n  when this entity gets used it will spawn an item \n\nthat matches its spawnitem field\n\ne.i.\n\nspawnitem "
[
]

@PointClass size(-16 -16 -16, 16 16 16) color(102 230 179) = misc_firetrails : "This entity must target the plane its going to be attached to\n  its use function will turn the fire stream effect on and off\n  an alert entity call will kill it"
[
]

///
///
///

@SolidClass = func_door : "NOMONSTER   monsters will not trigger this door\n     0 - nosound (default)\n     1 - metal\n     2 - stone\n     3 - lab\n     4 - wood\n     5 - iron/jail\n     6 - portcullis\n     7 - wood (quiet)"
[
	key(string) : Key : : "-1 for locked, key number for which key opens, 0 for open.  default '0' unless door is targeted.  (trigger_aidoor entities targeting this door do /not/ affect the key status)"
	model2(studio) : "Model" : : ".md3 model to also draw"
	angle(string) : Angle : : "determines the opening direction"
	targetname(target_source) : Name : : "if set, no touch field will be spawned and a remote button or trigger field activates the door."
	speed(string) : Speed : : "movement speed (100 default)"
	closespeed(string) : Closespeed : : "optional different movement speed for door closing"
	wait(string) : Wait : : "wait before returning (3 default, -1 = never return)"
	lip(string) : Lip : : "lip remaining at end of move (8 default)"
	dmg(string) : Dmg : : "damage to inflict when blocked (2 default)"
	color(string) : Color : : "constantLight color"
	light(string) : Light : : "constantLight radius"
	health(string) : "Health" : : "if set, the door must be shot open"
	team(string) : "Team" : : "team name.  other doors with same team name will open/close in syncronicity"
	shoot_thru_scale(string) : Shoot_thru_scale : : "Multiplier for how much damage bullets do that have passed through the door.  Effectively how much damage the door 'absorbs'.  0.0 - 1.0 (0.0 will turn SHOOT-THRU off, 1.0 is full damage)"
	type(string) : Type : : "use sounds based on construction of door:"
	spawnflags(flags) = 
	[
		1 : "start_open" : 0 : "the door to moves to its destination when spawned, and operate in reverse.  It is used to temporarily or permanently close off an area when triggered (not useful for touch or takedamage doors)."
		2 : "toggle" : 0 : "wait in both the start and end states for a trigger event."
		4 : "crusher" : 0
		8 : "touch" : 0
		16 : "shoot" : 0 : "-THRU	Bullets don't stop when they hit the door.  Set shoot_thru_scale with bullet damage scale (see below)"
		64 : "thru" : 0
	]
]

@SolidClass = func_plat : "Plats are always drawn in the extended position so they will light correctly."
[
	lip(string) : Lip : : "default 8, protrusion above rest position"
	height(string) : Height : : "total height of movement, defaults to model height"
	speed(string) : Speed : : "overrides default 200."
	dmg(string) : Dmg : : "overrides default 2"
	model2(studio) : "Model" : : ".md3 model to also draw"
	color(string) : Color : : "constantLight color"
	light(string) : Light : : "constantLight radius"
]

@SolidClass = func_button : "When a button is touched, it moves some distance in the direction of it's angle, triggers all of it's targets, waits some time, then returns to it's original position where it can be triggered again."
[
	model2(studio) : "Model" : : ".md3 model to also draw"
	angle(string) : Angle : : "determines the opening direction"
	target(target_destination) : Target : : "all entities with a matching targetname will be used"
	speed(string) : Speed : : "override the default 40 speed"
	wait(string) : Wait : : "override the default 1 second wait (-1 = never return)"
	lip(string) : Lip : : "override the default 4 pixel lip remaining at end of move"
	health(string) : "Health" : : "if set, the button must be killed instead of touched"
	color(string) : Color : : "constantLight color"
	light(string) : Light : : "constantLight radius"
	spawnflags(flags) = 
	[
		1 : "x" : 0
		2 : "x" : 0
		4 : "x" : 0
		8 : "touch" : 0
		16 : "x" : 0
		32 : "x" : 0
		64 : "stayopen" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(128 77 0) = path_corner : "Train path corners."
[
	Target(string) : Target : : "next path corner and other targets to fire"
	targetname(target_source) : Name : : "The script uses this name to identify the corner"
	speed(string) : Speed : : "speed to move to the next corner"
	wait(string) : Wait : : "seconds to wait before behining move to next corner"
	count2(string) : Count2 : : "used only in conjunction with the truck_cam to control playing of gear changes"
	spawnflags(flags) = 
	[
		1 : "stop" : 0
		2 : "end" : 0
		4 : "reverse" : 0
	]
]

@SolidClass = func_train_rotating : "A train is a mover that moves between path_corner target points.\n\nThis train can also rotate along the X Y Z\n\nTrains MUST HAVE AN ORIGIN BRUSH.\n\nThe train spawns at the first target it is pointing at.\n\nOn the path corner:\n\nspeed    departure speed from that corner \n\nrotate   angle change for X Y Z to next corner \n\nduration duration for angle change (overrides speed)"
[
	model2(studio) : "Model" : : ".md3 model to also draw"
	dmg(string) : Dmg : : "default	2"
	speed(string) : Speed : : "default 100"
	noise(string) : "Sound" : : "looping sound to play when the train is in motion"
	target(target_destination) : Target : : "next path corner"
	color(string) : Color : : "constantLight color"
	light(string) : Light : : "constantLight radius"
	spawnflags(flags) = 
	[
		1 : "start_on" : 0
		2 : "toggle" : 0
		4 : "block_stops" : 0
	]
]

@SolidClass = func_leaky
[
	type(string) : Type : : "- leaks particles of this type"
]

@SolidClass = func_static : "A bmodel that just sits there, doing nothing.  Can be used for conditional walls and models.\n\nIf targeted, it will toggle existance when triggered\n\nWhen using pain you will need to specify the delay time\n\nvalue of 1 = 1 sec 2 = 2 sec so on...\n\ndefault is 1 sec you can use decimals \n\ndelay \n\nshard\n\nwill spawn rubble\n\nshard default is 4\n\nshard =\n\nshard_glass = 0,\n\nshard_wood = 1,\n\nshard_metal = 2,\n\nshard_ceramic = 3,\n\nshard_pebbles = 4"
[
	model2(studio) : "Model" : : ".md3 model to also draw"
	color(string) : Color : : "constantLight color"
	light(string) : Light : : "constantLight radius"
	example(string) : Example : : ""
	example(string) : Example : : ""
	spawnflags(flags) = 
	[
		1 : "start_invis" : 0 : "will start the entity as non-existant"
		2 : "pain" : 0 : "will use its target"
		4 : "painefx" : 0 : "will spawn a shards"
	]
]

@SolidClass = func_rotating : "You need to have an origin brush as part of this entity.\n\nThe center of that brush will be the point around which it is rotated. It will rotate around the Z axis by default.  You can check either the X_AXIS or Y_AXIS box to change that."
[
	model2(studio) : "Model" : : ".md3 model to also draw"
	speed(string) : Speed : : "determines how fast it moves; default value is 100."
	dmg(string) : Dmg : : "damage to inflict when blocked (2 default)"
	color(string) : Color : : "constantLight color"
	light(string) : Light : : "constantLight radius"
	spawnflags(flags) = 
	[
		1 : "start_on" : 0
		2 : "startinvis" : 0
		4 : "x_axis" : 0
		8 : "y_axis" : 0
	]
]

@SolidClass = func_bobbing : "Normally bobs on the Z axis"
[
	model2(studio) : "Model" : : ".md3 model to also draw"
	height(string) : Height : : "amplitude of bob (32 default)"
	speed(string) : Speed : : "seconds to complete a bob cycle (4 default)"
	phase(string) : Phase : : "the 0.0 to 1.0 offset in the cycle to start at"
	dmg(string) : Dmg : : "damage to inflict when blocked (2 default)"
	color(string) : Color : : "constantLight color"
	light(string) : Light : : "constantLight radius"
	spawnflags(flags) = 
	[
		1 : "x_axis" : 0
		2 : "y_axis" : 0
	]
]

@SolidClass = func_pendulum : "You need to have an origin brush as part of this entity.\n\nPendulums always swing north / south on unrotated models.  Add an angles field to the model to allow rotation in other directions.\n\nPendulum frequency is a physical constant based on the length of the beam and gravity."
[
	model2(studio) : "Model" : : ".md3 model to also draw"
	speed(string) : Speed : : "the number of degrees each way the pendulum swings, (30 default)"
	phase(string) : Phase : : "the 0.0 to 1.0 offset in the cycle to start at"
	dmg(string) : Dmg : : "damage to inflict when blocked (2 default)"
	color(string) : Color : : "constantLight color"
	light(string) : Light : : "constantLight radius"
]

@SolidClass = func_door_rotating : "You need to have an origin brush as part of this entity.\n\nThe center of that brush will be the point around which it is rotated. It will rotate around the Z axis by default.  You can check either the X_AXIS or Y_AXIS box to change that (only one axis allowed. If both X and Y are checked, the default of Z will be used).\n\nSHOOT-THRU	Bullets don't stop when they hit the door.  Set shoot_thru_scale with bullet damage scale (see below)\n     0 - nosound (default)\n     1 - metal\n     2 - stone\n     3 - lab\n     4 - wood\n     5 - iron/jail\n     6 - portcullis\n     7 - wood (quiet)"
[
	key(string) : Key : : "-1 for locked, key number for which key opens, 0 for open.  default '0' unless door is targeted.  (trigger_aidoor entities targeting this door do /not/ affect the key status)"
	model2(studio) : "Model" : : ".md3 model to also draw"
	degrees(string) : Degrees : : "determines how many degrees it will turn (90 default)"
	speed(string) : Speed : : "movement speed (100 default)"
	closespeed(string) : Closespeed : : "optional different movement speed for door closing"
	time(string) : Time : : "how many milliseconds it will take to open 1 sec = 1000"
	dmg(string) : Dmg : : "damage to inflict when blocked (2 default)"
	color(string) : Color : : "constantLight color"
	light(string) : Light : : "constantLight radius"
	shoot_thru_scale(string) : Shoot_thru_scale : : "Multiplier for how much damage bullets do that have passed through the door.  Effectively how much damage the door 'absorbs'.  0.0 - 1.0 (0.0 will turn SHOOT-THRU off, 1.0 is full damage)"
	type(string) : Type : : "use sounds based on construction of door:"
	team(string) : "Team" : : "team name.  other doors with same team name will open/close in syncronicity"
	spawnflags(flags) = 
	[
		2 : "toggle" : 0
		4 : "x_axis" : 0
		8 : "y_axis" : 0
		16 : "reverse" : 0
		32 : "force" : 0 : "door opens even if blocked"
		64 : "stayopen" : 0
		128 : "take_key" : 0 : "removes the key from the players inventory"
	]
]

@PointClass size(-6 -6 -6, 6 6 6) color(0 128 204) = target_effect
[
	mass(string) : Mass : : "defaults to 15.  This determines how much debris is emitted when it explodes.  (number of pieces)"
	dmg(string) : Dmg : : "defaults to 0.  damage radius blast when triggered"
	type(string) : Type : : "- if 'rubble' is specified, this is the model type (glass, wood, metal, gibs, brick, rock, fabric) default is wood"
	spawnflags(flags) = 
	[
		1 : "tnt" : 0
		2 : "explode" : 0
		4 : "smoke" : 0
		8 : "rubble" : 0
		16 : "gore" : 0
		32 : "lowgrav" : 0
		64 : "debris" : 0
	]
]

@SolidClass = func_explosive : "Any brush that you want to explode or break apart.  If you want an explosion, set dmg and it will do a radius explosion of that amount at the center of the bursh.\n\nthe default sounds are:\n  wood	- sound/world/boardbreak.wav\n  glass	- sound/world/glassbreak.wav\n  metal	- sound/world/metalbreak.wav\n  gibs	- sound/player/gibsplit1.wav\n  brick	- sound/world/brickfall.wav\n  stone	- sound/world/stonefall.wav\n  fabric	- sound/world/metalbreak.wav	// (SA) temp"
[
	model2(studio) : "Model" : : "optional md3 to draw over the solid clip brush. As of wolf 1.33, this does not work correctly in moltiplayer. The model always appears at map origin."
	numLivingFrames(string) : NumLivingFrames : : "- how many frames to loop while the ent is 'alive' (model should have two animations: living->dead. living always starts at frame '0')"
	numDeadFrames(string) : NumDeadFrames : : "- how many frames to play when the ent 'dies' ('nnnFrames' parameters must go together)"
	wait(string) : Wait : : "- how long (in seconds) to leave the model after it's 'dead'.  '-1' leaves forever."
	NOTE(string) : NOTE : : "if you use model2, you must have an origin brush in the explosive with the center of the origin at the origin of the model"
	item(string) : Item : : "- when it explodes, pop this item out with the debirs (use QUAKED name. ex: item_health_small)"
	dmg(string) : Dmg : : "- how much radius damage should be done, defaults to 0"
	health(string) : "Health" : : "- defaults to 100.  If health is set to '0' the brush will not be shootable."
	targetname(target_source) : Name : : "- if set, no touch field will be spawned and a remote button or trigger field triggers the explosion."
	scriptname(string) : Scriptname : : "- script whose death is triggered when the object is destroyed"
	type(string) : Type : : "- type of debris (glass, wood, metal, gibs, brick, rock, fabric) default is wood"
	mass(string) : Mass : : "- defaults to 75.  This determines how much debris is emitted when it explodes.  You get one large chunk per 100 of mass (up to 8) and one small chunk per 25 of mass (up to 16).  So 800 gives the most."
	noise(string) : "Sound" : : "- sound to play when triggered.  The explosive will default to a sound that matches it's 'type'.  Use the sound name nosound (case in-sensitive) if you want it silent."
	fxdensity(string) : Fxdensity : : "size of explosion 1 - 100 (default is 10)"
	spawnflags(flags) = 
	[
		1 : "start_invis" : 0
		2 : "touchable" : 0 : "means automatic use on player contact."
		4 : "useshader" : 0 : "will apply the shader used on the brush model to the debris."
		8 : "lowgrav" : 0 : "specifies that the debris will /always/ fall slowly"
		16 : "noblockaas" : 0
		32 : "explo" : 0 : "only explosives can damage it rockets grendades etc"
		64 : "dynomite" : 0 : "only can be damaged by DY-NO-MITE!"
	]
]

@SolidClass = func_invisible_user : "when activated will use its target\n\nNormally when a player 'activates' this entity, if the entity has been turned 'off' (by a scripted command) you will hear a sound to indicate that you cannot activate the user.\n\nThe sound defaults to sound/movers/invis_user_off.wav\n\nthey /don't/ need to be all uppercase"
[
	delay(string) : Delay : : "- time (in seconds) before it can be used again"
	offnoise(string) : Offnoise : : "- specifies an alternate sound"
	cursorhint(string) : Cursorhint : : "- overrides the auto-location of targeted entity (list below)"
	cursorhint(string) : Cursorhint : : "cursor types: (probably more, ask sherman if you think the list is out of date)"
	spawnflags(flags) = 
	[
		1 : "startoff" : 0
		2 : "has_user" : 0
		4 : "no_off_noise" : 0 : "- no sound will play if the invis_user is used when 'off'"
		8 : "not_kickable" : 0 : "- kicking doesn't fire, only player activating"
	]
]

///
///
///

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) = props_box_32
[
]

@PointClass size(-24 -24 -24, 24 24 24) color(255 0 0) = props_box_48
[
]

@PointClass size(-32 -32 -32, 32 32 32) color(255 0 0) = props_box_64
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(204 118 41) = props_sparks : "the default direction is strait up use info_no_null for alt direction\n\ndelay = how long till next spark effect\n\nwait = life of the spark with some random variance default 1.0 sec\n\nhealth = random number of sparks upto specified amount default 8\n\nstart_size default 8 along the x\n\nend_size default 8 along the y\n\nby changing the size will change the spawn origin of the individual spark\n\nei 16 x 8 or 24 x 32 would cause the sparks to spawn that many units from \n\nthe origin\n\nspeed controls how quickly the sparks will travel default is 2"
[
	spawnflags(flags) = 
	[
		1 : "electric" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(204 118 41) = props_gunsparks : "the default direction is strait up use info_no_null for alt direction\n\nthis entity must be used to see the effect"
[
	speed(string) : Speed : : "default is 20"
	health(string) : "Health" : : "number to spawn default is 4"
]

@PointClass size(-8 -8 -8, 8 8 8) color(204 118 41) = props_smokedust : "health = how many pieces 16 is default"
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(179 77 41) = props_dust : "you should give this ent a target use a not null \n\nor you could set its angles in the editor"
[
	spawnflags(flags) = 
	[
		1 : "white" : 0
	]
]

@SolidClass = props_bench : "requires an origin brush\n\nhealth = 10 by default"
[
]

@SolidClass = props_radio : "requires an origin brush\n\nhealth = defaults to 100"
[
]

@SolidClass = props_radioSEVEN : "requires an origin brush\n\nhealth = defaults to 100\n  \n  the models dims are\n  x 32\n  y 136\n  z 32\n  if you want more explosions you'll need func explosive\n  it will fire all its targets upon death"
[
]

@SolidClass = props_locker_tall : "requires an origin brush"
[
]

@PointClass size(-16 -16 0, 16 16 32) color(204 153 51) = props_chair_chat : "point entity\n\nhealth = default = 10\n\nwait = defaults to 5 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@PointClass size(-16 -16 0, 16 16 32) color(204 153 51) = props_chair_side : "point entity\n\nhealth = default = 10\n\nwait = defaults to 5 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@PointClass size(-16 -16 0, 16 16 32) color(204 153 51) = props_chair_hiback : "point entity\n\nhealth = default = 10\n\nwait = defaults to 5 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@PointClass size(-16 -16 0, 16 16 32) color(204 153 51) = props_chair : "point entity\n\nhealth = default = 10\n\nwait = defaults to 5 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(204 153 153) = props_damageinflictor : "this entity when used will cause 9999 damage to all entities it is targeting\n\nthen it will be removed"
[
]

@PointClass size(-4 -4 -4, 4 4 4) color(204 128 26) = props_shard_generator : "wait = defaults to 5 how many shards to spawn ( try not to exceed 20 )\n  \n\nshard =\n\nshard_glass = 0,\n\nshard_wood = 1,\n\nshard_metal = 2,\n\nshard_ceramic = 3"
[
]

@PointClass size(-16 -16 0, 16 16 32) color(204 153 51) = props_desklamp : "point entity\n\nhealth = default = 10\n\nwait = defaults to 5 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@PointClass size(-13 -13 0, 13 13 40) color(204 153 51) = props_flamebarrel : "angle will determine which way the lid will fly off when it explodes\n\nwhen selecting the OIL spawnflag you have the option of giving it a target\n\nthis will ensure that the oil sprite will show up where you want it\n\nthe default is in the middle of the barrel on the floor"
[
	spawnflags(flags) = 
	[
		1 : "smoking" : 0
		2 : "nolid" : 0
		4 : "oil" : 0
	]
]

@PointClass size(-32 -32 0, 32 32 64) color(204 153 51) = props_crate_64 : "breakable pushable\n  health = default = 20\n\nwait = defaults to 10 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@PointClass size(-16 -16 0, 16 16 32) color(204 153 51) = props_crate_32 : "breakable pushable\n  health = default = 20\n\nwait = defaults to 10 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@SolidClass = props_crate_32x64 : "requires an origin brush\n\nbreakable NOT pushable \n\nbrushmodel only\n  health = default = 20\n\nwait = defaults to 10 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@SolidClass = props_58x112tablew : "dimensions are 58 x 112 x 32 (x,y,z)\n\nrequires an origin brush\n\nbreakable NOT pushable \n\nbrushmodel only\n  health = default = 10\n\nwait = defaults to 10 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@SolidClass = props_castlebed : "dimensions are 112 x 128 x 80 (x,y,z)\n\nrequires an origin brush\n\nbreakable NOT pushable \n\nbrushmodel only\n  health = default = 20\n\nwait = defaults to 10 how many shards to spawn ( try not to exceed 20 )\n\nshard ="
[
]

@SolidClass = props_snowGenerator : "entity brush need to be targeted to an info notnull this \n\nwill determine the direction the snow particles will travel.\n\nspeed \n\ngravity\n\nturb\n\ncount is the number of snowflurries 3 to 5 would be a good number\n\nduration is how long the effect will last 1 is 1 second"
[
	spawnflags(flags) = 
	[
		1 : "toggle_on" : 0
		2 : "always_on" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(77 51 179) = props_FireColumn : "this entity will require a target use an infonotnull to specifiy its direction\n\nradius = distance flame will corkscrew from origin\n\nspeed = default is 900\n\nduration = default is 3 sec\n \n\nstart_size = default is 5\n\nend_size = defaults 7 thru 17\n\ncount = defaults 100 thru 500 \n\ndelay before it happens again use trigger_relay for now\n\nassign a model"
[
	defaults(string) : Defaults : : ""
	Pending(string) : Pending : : ""
	spawnflags(flags) = 
	[
		1 : "corkscrew" : 0
		2 : "smoke" : 0
		4 : "gravity" : 0
		8 : "halfgravity" : 0
	]
]

@PointClass size(-8 -8 -16, 8 8 16) color(77 128 179) studio() = props_ExploPart : "for wood:\n  it can be one of the following 64 48 32 24 16 8\n\nfor concrete:\n\nfor stone:"
[
	model(studio) : "Model" : : "will load a discreet model"
	noise(string) : "Sound" : : "will load looping sound for the model"
	target(target_destination) : Target : : "point to an infonotnull to specify dir default will be up"
	speed(string) : Speed : : "default to 900"
	type(string) : Type : : "wood concrete or stone"
	count(string) : Count : : "in the absense of a model count will determine the piece to spawn"
]

@PointClass size(-8 -8 0, 8 8 16) color(153 179 179) studio() = props_decoration : "you will need to specify the bounding box for the entity"
[
	model2(studio) : "Model" : : "will specify the model to load"
	noise(string) : "Sound" : : "the looping sound entity is to make"
	type(string) : Type : : "type of debris (glass, wood, metal, ceramic, rubble) default is wood"
	count(string) : Count : : "how much debris ei. default 4 pieces"
	high(string) : High : : "default is 4"
	wide(string) : Wide : : "default is 4"
	frames(string) : Frames : : "how many frames of animation to play"
	loop(string) : Loop : : "when the animation is done start again on this frame"
	startonframe(string) : Startonframe : : "on what frame do you want to start the animation"
	spawnflags(flags) = 
	[
		1 : "startinvis" : 0
		2 : "debris" : 0
		4 : "animate" : 0
		8 : "keepblock" : 0
		16 : "touchactivate" : 0
		32 : "looping" : 0
		64 : "starton" : 0
	]
]

@SolidClass = props_decorBRUSH : "must have an origin brush"
[
	model2(studio) : "Model" : : "will specify the model to load"
	noise(string) : Sound File : : "the looping sound entity is to make"
	type(string) : Type : : "type of debris (glass, wood, metal, ceramic, rubble) default is wood"
	count(integer) : Count : : "how much debris ei. default 4 pieces"
	frames(integer) : Frames : : "how many frames of animation to play"
	loop(string) : Loop : : "when the animation is done start again on this frame"
	startonframe(integer) : Startonframe : : "on what frame do you want to start the animation"
	spawnflags(flags) = 
	[
		1 : "startinvis" : 0
		2 : "debris" : 0
		4 : "animate" : 0 : "animate on death"
		8 : "keepblock" : 0
		32 : "looping" : 0
		64 : "starton" : 0 : "playanimation on death"
	]
]

@PointClass size(-8 -8 0, 8 8 16) color(153 179 179) studio() = props_decoration_scale : "you will need to specify the bounding box for the entity"
[
	modelscale(string) : Modelscale : : "- Scale multiplier (defaults to 1.0 and scales uniformly)"
	modelscale_vec(string) : Modelscale_vec : : "- Set scale per-axis.  Overrides modelscale, so if you have both the modelscale is ignored"
	model2(studio) : "Model" : : "will specify the model to load"
	noise(string) : "Sound" : : "the looping sound entity is to make"
	type(string) : Type : : "type of debris (glass, wood, metal, ceramic, rubble) default is wood"
	count(string) : Count : : "how much debris ei. default 4 pieces"
	high(string) : High : : "default is 4"
	wide(string) : Wide : : "default is 4"
	frames(string) : Frames : : "how many frames of animation to play"
	loop(string) : Loop : : "when the animation is done start again on this frame"
	startonframe(string) : Startonframe : : "on what frame do you want to start the animation"
	spawnflags(flags) = 
	[
		1 : "startinvis" : 0
		2 : "debris" : 0
		4 : "animate" : 0
		8 : "keepblock" : 0
		16 : "touchactivate" : 0
		32 : "looping" : 0
		64 : "starton" : 0
	]
]

@PointClass size(-8 -8 0, 8 8 16) color(153 179 179) = props_skyportal : "To have the portal sky fogged, enter any of the following values:"
[
	fov(string) : Fov : : "for the skybox default is 90"
	fogcolor(string) : Fogcolor : : "(r g b) (values 0.0-1.0)"
	fognear(string) : Fognear : : "distance from entity to start fogging"
	fogfar(string) : Fogfar : : "distance from entity that fog is opaque"
]

@PointClass size(-8 -8 0, 8 8 128) color(153 77 51) studio() = props_statue : "you will need to specify the bounding box for the entity"
[
	model2(studio) : "Model" : : "will specify the model to load"
	noise(string) : "Sound" : : "the sound entity is to make"
	type(string) : Type : wood : "type of debris (glass, wood, metal, ceramic, rubble)"
	count(string) : Count : : "how much debris ei. default 4 pieces"
	high(string) : High : 4 : ""
	wide(string) : Wide : 4 : ""
	frames(string) : Frames : : "how many frames of animation to play"
	delay(string) : Delay : : "how long of a delay before damage is inflicted ei. 0.5 sec or 2.7 sec"
	damage(string) : Damage : : "amount of damage to be inflicted"
	spawnflags(flags) = 
	[
		1 : "hurt" : 0
		2 : "debris" : 0
		4 : "animate" : 0
		8 : "keepblock" : 0
	]
]

@SolidClass = props_statueBRUSH : "needs an origin brush\n\nTHE damage has been disabled at the moment"
[
	model2(studio) : "Model" : : "will specify the model to load"
	noise(string) : "Sound" : : "the sound entity is to make"
	type(string) : Type : : "type of debris (glass, wood, metal, ceramic, rubble) default is wood"
	count(string) : Count : : "how much debris ei. default 4 pieces"
	frames(string) : Frames : : "how many frames of animation to play"
	delay(string) : Delay : : "how long of a delay before damage is inflicted ei. 0.5 sec or 2.7 sec"
	damage(string) : Damage : : "amount of damage to be inflicted"
	spawnflags(flags) = 
	[
		1 : "hurt" : 0
		2 : "debris" : 0
		4 : "animate" : 0
		8 : "keepblock" : 0
	]
]

@PointClass size(-12 -21 -12, 12 21 12) color(153 179 77) studio("models/mapobjects/furniture/footlocker.md3") = props_footlocker : "the default sounds are:\n  wood	- sound/world/boardbreak.wav\n  glass	- sound/world/glassbreak.wav\n  metal	- sound/world/metalbreak.wav\n  gibs	- sound/player/gibsplit1.wav\n  brick	- sound/world/brickfall.wav\n  stone	- sound/world/stonefall.wav\n  fabric	- sound/world/metalbreak.wav	// (SA) temp"
[
	noise(string) : "Sound" : : "the sound entity is to make upon death"
	locknoise(string) : Locknoise : : "the locked sound to play"
	wait(string) : Wait : : "denotes how long the wait is going to be before the locked sound is played again default is 1 sec"
	health(string) : "Health" : : "default is 1"
	spawnitem(string) : Spawnitem : : "- will spawn this item unpon death use the pickup_name ei 9mm"
	type(string) : Type : : "- type of debris (glass, wood, metal, gibs, brick, rock, fabric) default is wood"
	mass(string) : Mass : : "- defaults to 75.  This determines how much debris is emitted.  You get one large chunk per 100 of mass (up to 8) and one small chunk per 25 of mass (up to 16).  So 800 gives the most."
	dl_shader(string) : Dl_shader : : "needs to be set the same way as a target_effect"
	TBD(string) : TBD : : "the spawning of junk still pending and animation when used"
]

@PointClass size(-8 -8 -8, 8 8 8) color(153 179 77) = props_flamethrower : "the effect occurs when this entity is used\n\nneeds to aim at a info_notnull"
[
	duration(string) : Duration : : "how long the effect is going to last for example 1.2 sec 2.7 sec"
	random(string) : Random : : "how long of a random variance so the effect isnt exactly the same each time for example 1.1 sec or 0.2 sec"
	size(string) : Size : : "valid ranges are 1.0 to 0.1"
	spawnflags(flags) = 
	[
		1 : "tracking" : 0
	]
]

///
///
///

@SolidClass = script_mover : "Scripted brush entity. A simplified means of moving brushes around based on events.\n\nRequires an origin brush."
[
	modelscale(string) : Modelscale : 1 : "Scale multiplier (defaults to 1, and scales uniformly)"
	modelscale_vec(string) : Modelscale_vec : : "Set scale per-axis.  Overrides modelscale, so if you have both the modelscale is ignored"
	model2(studio) : "Model" : : "optional md3 to draw over the solid clip brush"
	scriptname(string) : Scriptname : : "name used for scripting purposes (like aiName in AI scripting)"
	health(string) : "Health" : : "optionally make this entity damagable"
	spawnflags(flags) = 
	[
		1 : "Triggered Spawn" : 0
		2 : "solid" : 0
		4 : "explosivedamageonly" : 0
	]
]

@PointClass size(-16 -16 -24, 16 16 64) color(128 64 255) studio() = script_model_med : "MEDIUM SIZED scripted entity, used for animating a model, moving it around, etc\n\nSOLID spawnflag means this entity will clip the player and AI, otherwise they can walk\n\nstraight through it"
[
	model(studio) : "Model" : : "the full path of the model to use"
	scriptname(string) : Scriptname : : "name used for scripting purposes (like aiName in AI scripting)"
	spawnflags(flags) = 
	[
		1 : "Triggered Spawn" : 0
		2 : "solid" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 64 255) = script_camera : "  This is a camera entity. Used by the scripting to show cinematics, via special\n  camera commands. See scripting documentation."
[
	scriptname(string) : Scriptname : : "name used for scripting purposes (like aiName in AI scripting)"
	spawnflags(flags) = 
	[
		1 : "Triggered Spawn" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 64 255) = script_multiplayer : "  This is used to script multiplayer maps.  Entity not displayed in game."
[
	scriptname(string) : Scriptname : : "name used for scripting purposes (REQUIRED=='game_manager')"
]

///
///
///

@SolidClass = worldspawn : "Worldspawn spawnflags to indicate if a gametype is not supported\n\nEvery map should have exactly one worldspawn."
[
	music(string) : Music Track : : "Music wav file"
	gravity(string) : Gravity : : "800 is default gravity"
	message(string) : "Message" : : "Text to print during connection process"
	ambient(string) : Ambient Light : : "Ambient light value (must use '_color')"
	_color(color1) : "RGB color" : "1 1 0.5" : "Ambient light color (must be used with 'ambient')"
	sun(string) : Sun : : "Shader to use for 'sun' image"
	_blocksize(integer) : _blocksize : : "q3map always splits the BSP tree along the planes X=blocksize*n and Y=_blocksize*n. Default _blocksize value is 1024. Increase the _blocksize using larger powers of 2 to reduce compile times on very large maps with low structural brush density."
	gridsize(string) : Gridsize : : "granularity of the light grid created by q3map. Values of three intergers by spaces, represents number of units between grid points in X, Y and Z. Default gridsize is 128 128 256. Use larger powers of 2 to reduce BSP size and compile time on very large maps."
	fogclip(integer) : Fogclip : : "Uses vis to exclude stuff beyond the specified distance. q3map support varies."
	twoMinuteSound_axis(string) : twoMinuteSound_axis : : 
	twoMinuteSound_allied(string) : twoMinuteSound_allied : : 
	thirtySecondSound_axis(string) : ThirtySecondSound_axis : : 
	thirtySecondSound_allied(string) : ThirtySecondSound_allied : : "Use these to override the default round timer sounds (two minute and thirty second warnings). Setting them to 0 disables these sounds."
	spawnflags(flags) = 
	[
		1 : "no_gt_wolf" : 0
		2 : "no_stopwatch" : 0
		4 : "no_checkpoint" : 0
	]
]

///
///
///

@PointClass size(-8 -8 -8, 8 8 8) color(255 0 0) = target_give : "Gives the activator all the items pointed to."
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 0 0) = target_remove_powerups : "takes away all the activators powerups.\n\nUsed to drop flight powerups into death puts."
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 255 0) = target_delay
[
	wait(string) : Wait : : "seconds to pause before firing targets."
	random(string) : Random : : "delay variance, total delay = delay +/- random seconds"
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 0 0) = target_score : "The activator is given this many points."
[
	count(string) : Count : : "number of points to add, default 1"
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 0 0) = target_print : "If private, only the activator gets the message.  If no checks, all clients get the message."
[
	message(string) : "Message" : : "text to print"
	spawnflags(flags) = 
	[
		1 : "redteam" : 0
		2 : "blueteam" : 0
		4 : "private" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 0 0) = target_speaker : "A global sound will play full volume throughout the level.\n\nActivator sounds will play on the player that activated the target.\n\nGlobal and activator sounds can't be combined with looping.\n\nNormal sounds play each time the target is used.\n\nLooped sounds will be toggled by use functions.\n\nMultiple identical looping sounds will just increase volume without any speed cost."
[
	noise(string) : Sound : : "wav file to play"
	wait(string) : Wait : : "Seconds between auto triggerings, 0 = don't auto trigger"
	random(string) : Random : : "wait variance, default is 0"
	spawnflags(flags) = 
	[
		1 : "looped_on" : 0
		2 : "looped_off" : 0
		4 : "global" : 0
		8 : "activator" : 0
		16 : "vis_multiple" : 0
		32 : "no_pvs" : 0 : "- this sound will not turn off when not in the player's PVS"
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(0 128 204) = target_laser : "When triggered, fires a laser.  You can either set a target or a direction."
[
	spawnflags(flags) = 
	[
		1 : "start_on" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 0 0) = target_teleporter : "The activator will be teleported away."
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 255 0) = target_relay : "This doesn't perform any actions except fire its targets.\n\nThe activator can be forced to be from a certain team.\n\nif RANDOM is checked, only one of the targets will be fired, not all of them\n\nthis key is currently an int (1-16) which matches the id of a key entity (key_key1 = 1, etc)\n\nBy default this sound is sound/movers/doors/default_door_locked.wav"
[
	key(string) : Key : : "specifies an item you can be carrying that affects the operation of this relay"
	lockednoise(string) : Lockednoise : : "specifies a .wav file to play if the relay is used and the player doesn't have the necessary key."
	spawnflags(flags) = 
	[
		1 : "red_only" : 0
		2 : "blue_only" : 0
		4 : "random" : 0
		8 : "nokey_only" : 0 : "means fire only if I do /not/ have the specified key"
		16 : "take_key" : 0 : "removes the key from the players inventory"
		32 : "no_locked_noise" : 0 : "specifies that it will be silent if activated without proper key"
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(128 128 128) = target_kill : "Kills the activator. (default)\n\nIf targets, they will be killed when this is fired"
[
	spawnflags(flags) = 
	[
		1 : "kill_user_too" : 0 : "will still kill the activator when this ent has targets (default is only kill targets, not activator)"
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(0 128 0) = target_location : "Set message to the name of this location.\n\nSet count to 0-7 for color.\n\nClosest target_location in sight used for the location, if none\n\nin site, closest in distance"
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 255 0) = target_fog : "color picker chooses color of fog\n\ndistance value sets the type of fog.  values > 1 are distance fog (ex. 2048), values < 1 are density fog (ex. .0002)"
[
	distance(string) : Distance : : "sets fog distance.  Use value '0' to give control back to the game (and use the fog values specified in the sky shader if present)"
	near(string) : Near : : "is fog start distance when using distance fog"
	time(string) : Time : : "time it takes to change fog to new value.  default time is 1 sec"
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 255 0) = target_counter : "Increments the counter pointed to."
[
	count(string) : Count : : "is the key for the count value"
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 255 0) = target_autosave : "saves game to 'autosave.svg' when triggered then dies."
[
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 255 0) = target_lock : "Sets the door to a state requiring key n"
[
	key(string) : Key : : "is the required key"
	so(string) : So : : ""
	key(string) : Key : : "0  unlocks the door"
	key(string) : Key : : "-1 locks the door until a target_lock with key:0"
	key(string) : Key : : "n  means the door now requires key n"
]

@PointClass size(-4 -4 -4, 4 4 4) color(255 255 0) = target_alarm : "does nothing yet (effectively a relay right now)"
[
]

@PointClass size(-32 -32 -16, 32 32 16) color(255 0 0) = target_smoke : "1 second = 1000\n\n1 FRAME = 100"
[
	delay(integer) : Delay : 100 : "this is the maximum smoke that will show up"
	time(integer) : Fade out time : 5000 : "Time lapsed before the smoke disipates"
	duration(integer) : Duration : 2000 : "Duration before the smoke starts to alpha"
	start_size(integer) : Start size : 24 : ""
	end_size(integer) : End size : 96 : ""
	wait(integer) : Speed : 50 : "the rate at which it will travel up"
	
	spawnflags(flags) = 
	[
		1 : "black" : 0
		2 : "white" : 0
		4 : "smokeon" : 0
		8 : "gravity" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(255 179 51) = target_script_trigger : "must have an aiName (or scriptname ???)\n\nmust have a target\n\nwhen used it will fire its targets "
[
	target(target_destination) : Target : : "The name of the trigger"
	scriptname(string) : Scriptname : : "This corrisponds to the block"
	ainame(string) : "AI Name" : : "like script name but for SP ???"
]

@PointClass size(-8 -8 -8, 8 8 8) color(0 192 204) = target_rumble : "wait = default is 2 seconds = time the entity will enable rumble effect"
[
	pitch(string) : Pitch : : "value from 1 to 10 default is 5"
	yaw(string) : Yaw : : "value from 1 to 10 default is 5"
	rampup(string) : Rampup : : "how much time it will take to reach maximum pitch and yaw in seconds"
	rampdown(string) : Rampdown : : "how long till effect ends after rampup is reached in seconds"
	startnoise(string) : Startnoise : : "startingsound"
	noise(string) : "Sound" : : "the looping sound entity is to make"
	endnoise(string) : Endnoise : : "endsound"
	duration(string) : Duration : : "the amount of time the effect is to last ei 1.0 sec 3.6 sec"
	spawnflags(flags) = 
	[
		1 : "startoff" : 0
	]
]

///
///
///

@PointClass size(-18 -18 -24, 18 18 48) color(128 0 0) = team_CTF_redplayer : "Only in CTF games.  Red players spawn here at game start.\n\nAs of wolf version 1.32 using alertentity on the player start points and spawn\n\npoints targetname toggles it's active/inactive state."
[
	spawnflags(flags) = 
	[
		1 : "invulnerable" : 0
		4 : "startdisabled" : 0
	]
]

@PointClass size(-18 -18 -24, 18 18 48) color(0 0 128) = team_CTF_blueplayer : "Only in CTF games.  Blue players spawn here at game start.\n\nAs of wolf version 1.32 using alertentity on the player start points and spawn\n\npoints targetname toggles it's active/inactive state."
[
	spawnflags(flags) = 
	[
		1 : "invulnerable" : 0
		4 : "startdisabled" : 0
	]
]

@PointClass size(-18 -18 -24, 18 18 48) color(255 0 0) = team_CTF_redspawn : "potential spawning position for axis team in wolfdm games.  \n\nIf target is set, point spawnpoint toward target activation\n\nAs of wolf version 1.32 using alertentity on the player start points and spawn\n\npoints targetname toggles it's active/inactive state."
[
	spawnflags(flags) = 
	[
		1 : "invulnerable" : 0
		2 : "startactive" : 0
	]
]

@PointClass size(-18 -18 -24, 18 18 48) color(0 0 255) = team_CTF_bluespawn : "potential spawning position for allied team in wolfdm games.  \n\nIf target is set, point spawnpoint toward target activation\n\nAs of wolf version 1.32 using alertentity on the player start points and spawn\n\npoints targetname toggles it's active/inactive state."
[
	spawnflags(flags) = 
	[
		1 : "invulnerable" : 0
		2 : "startactive" : 0
	]
]

@PointClass size(-16 -16 -16, 16 16 16) color(255 0 0) = team_CTF_redflag : "Can be used as an objective in Wolf."
[
]

@PointClass size(-16 -16 -16, 16 16 16) color(0 0 255) = team_CTF_blueflag : "Can be used as an objective in Wolf."
[
]

@PointClass size(-16 -16 -24, 16 16 32) color(255 255 77) = team_WOLF_objective : "marker for objective\n\nThis marker will be used to generate a list of objectives\n\nthat players can elect to spawn near in the limbo spawn\n\nscreen."
[
	description(string) : Description : : "short text key for objective name that"
]

@PointClass size(-16 -16 0, 16 16 128) color(153 230 153) studio() = team_WOLF_checkpoint : "This is the flagpole players touch in Capture and Hold game scenarios.\n\nIt will call specific trigger funtions in the map script for this object.\n\nWhen allies capture, it will call allied_capture.\n\nWhen axis capture, it will call axis_capture."
[
	model(studio) : "Model" : : "model to use (will use same animations as flagpole however)"
	scriptname(string) : Scriptname : : "name of script which contains allied_capture and axis_capture triggers"
	spawnflags(flags) = 
	[
		1 : "spawnpoint" : 0
		2 : "cp_hold" : 0 : "spawnflag is possibly for unfinished Capture and Hold mode."
		4 : "axis_only" : 0
		8 : "allied_only" : 0
	]
]

///
///
///

@PointClass size(-8 -8 -8, 8 8 8) color(128 179 77) = camera_cam
[
	track(string) : Track : : "is the targetname of the entity providing the starting direction use an info_notnull "
	spawnflags(flags) = 
	[
		1 : "on" : 0
		2 : "tracking" : 0
		4 : "moving" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(77 179 230) = screen_fade : "  1 = 1 sec\n  .5 = .5 sec\n\ndefaults are .5 sec"
[
	wait(string) : Wait : : "duration of fade out"
	delay(string) : Delay : : "duration of fade in"
]

@SolidClass = camera_reset_player : "touched will record the players position and fire off its targets and or cameras\n\nused will reset the player back to his last position"
[
]

///
///
///

@SolidClass = trigger_multiple : "Variable sized repeatable trigger.  Must be targeted at one or more entities.\n\nso, the basic time between firing is a random time between"
[
	wait(string) : Wait : : "Seconds between triggerings, 0.5 default, -1 = one time only."
	random(string) : Random : : "wait variance, default is 0"
	spawnflags(flags) = 
	[
		1 : "ai_touch" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(128 128 128) = trigger_always : "This trigger will always fire.  It is activated by the world."
[
]

@SolidClass = trigger_push : "Must point at a target_position, which will be the apex of the leap.\n\nThis will be client side predicted, unlike target_push"
[
	spawnflags(flags) = 
	[
		1 : "toggle" : 0
		2 : "removeaftertouch" : 0
		4 : "pushplayeronly" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(128 128 128) = target_push : "Pushes the activator in the direction.of angle, or towards a target apex.\n\nif bouncepad, play bounce noise instead of windfly"
[
	speed(string) : Speed : : "defaults to 1000"
	spawnflags(flags) = 
	[
		1 : "bouncepad" : 0
	]
]

@SolidClass = trigger_teleport : "Allows client side prediction of teleportation events.\n\nMust point at a target_position, which will be the teleport destination."
[
]

@SolidClass = trigger_hurt : "Any entity that touches this will be hurt.\n\nIt does dmg points of damage each server frame\n\nTargeting the trigger will toggle its on / off state.\n\ndefault is zero\n\nthe entity must be used first before it will count down its life "
[
	dmg(integer) : "Damage" : "5" : "default 5 (whole numbers only)"
	life(integer) : "Life" : "0" : "time this brush will exist if value is zero will live for ever ei 0.5 sec 2.sec"
	spawnflags(flags) = 
	[
		1 : "start_off" : 0
		4 : "silent" : 0 : "supresses playing the sound"
		8 : "no_protection" : 0 : "*nothing* stops the damage"
		16 : "slow" : 0 : "changes the damage rate to once per second"
		32 : "once" : 0
	]
]

@PointClass size(-8 -8 -8, 8 8 8) color(77 26 153) = func_timer : "This should be renamed trigger_timer...\n\nRepeatedly fires its targets.\n\nCan be turned on or off by using.\n\nso, the basic time between firing is a random time between"
[
	wait(string) : Wait : : "base time between triggering all targets, default is 1"
	random(string) : Random : : "wait variance, default is 0"
	spawnflags(flags) = 
	[
		1 : "start_on" : 0
	]
]

@SolidClass = trigger_once : "Must be targeted at one or more entities.\n\nOnce triggered, this entity is destroyed"
[
	spawnflags(flags) = 
	[
		1 : "ai_touch" : 0
	]
]

@SolidClass = trigger_deathCheck : "aiName entity making alertentity call\n\nthis entity will test if aiName is in its volume\n\nMust be targeted at one or more entities.\n\nOnce triggered, this entity is destroyed"
[
	spawnflags(flags) = 
	[
		2 : "gibflag" : 0 : "entity will never fire its target(s) if aiName entity was gibbed"
	]
]

@SolidClass = trigger_aidoor : "These entities must be placed on all doors one for each side of the door\n\nthis will enable ai's to operate the door and help in preventing ai's and\n\nthe player from getting stuck when the door is deciding which way to open"
[
]

@SolidClass = trigger_flagonly : "Player must be carrying the proper flag for it to trigger.\n\nIt will call the death function in the object's script."
[
	scriptName(string) : "Script Name" : : "The object name in the script file"
	spawnflags(flags) = 
	[
		1 : "red_flag" : 0 : "-- only trigger if player is carrying red flag"
		2 : "blue_flag" : 0 : "-- only trigger if player is carrying blue flag"
	]
]

@SolidClass = trigger_objective_info : "Players in this field will see a message saying that they are near an objective.\n\nAlso, if targeting a dynamitable objective, the dynamite must be armed inside of the trigger to blow up the objective."
[
	track(string) : "Location name" :  : "Mandatory, this text will be appended to ''You are near ''"
	target(string) : "Target" :  : "You may target dynamitable objectives"
	score(integer) : Score :  : "If targeting a dynamitable objective, give this score when blown."
	
	spawnflags(flags) = 
	[
		1 : "axis_objective" : 0 : "Set if targeting an objective owned by AXIS, then only allied dynamite will blow it up."
		2 : "allied_objective" : 0 : "Set if targeting an objective owned by ALLIES, then only axis dynamite will blow it up."
	]
]
